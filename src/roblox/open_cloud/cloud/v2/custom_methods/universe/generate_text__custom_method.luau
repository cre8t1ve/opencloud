--!strict
--!nolint LocalUnused
--# selene: allow(empty_if, if_same_then_else, manual_table_clone, unused_variable)
-- This file was @autogenerated by protoc-gen-luau
local proto = require(script.Parent.Parent.Parent.Parent.Parent.Parent.Parent.proto)

local GenerateTextRequest: proto.Message<GenerateTextRequest>
export type GenerateTextRequest = {
	path: string,
	user_prompt: string,
	system_prompt: string,
	temperature: number?,
	top_p: number?,
	max_tokens: number?,
	seed: number?,
	context_token: string?,
	model: string,
}

local GenerateTextResponse: proto.Message<GenerateTextResponse>
export type GenerateTextResponse = {
	generated_text: string,
	context_token: string,
	model: string,
}

GenerateTextRequest = {
	new = function()
		return {
			path = "",
			user_prompt = "",
			system_prompt = "",
			temperature = nil,
			top_p = nil,
			max_tokens = nil,
			seed = nil,
			context_token = nil,
			model = "",
		}
	end,

	encode = function(self: GenerateTextRequest): buffer
		local output = buffer.create(0)
		local cursor = 0

		if self.path ~= "" then
			output, cursor = proto.writeTag(output, cursor, 1, proto.wireTypes.lengthDelimited)
			output, cursor = proto.writeString(output, cursor, self.path)
		end

		if self.user_prompt ~= "" then
			output, cursor = proto.writeTag(output, cursor, 100, proto.wireTypes.lengthDelimited)
			output, cursor = proto.writeString(output, cursor, self.user_prompt)
		end

		if self.system_prompt ~= "" then
			output, cursor = proto.writeTag(output, cursor, 101, proto.wireTypes.lengthDelimited)
			output, cursor = proto.writeString(output, cursor, self.system_prompt)
		end

		if self.temperature ~= nil then
			output, cursor = proto.writeTag(output, cursor, 102, proto.wireTypes.i32)
			output, cursor = proto.writeFloat(output, cursor, self.temperature)
		end

		if self.top_p ~= nil then
			output, cursor = proto.writeTag(output, cursor, 103, proto.wireTypes.i32)
			output, cursor = proto.writeFloat(output, cursor, self.top_p)
		end

		if self.max_tokens ~= nil then
			output, cursor = proto.writeTag(output, cursor, 104, proto.wireTypes.varint)
			output, cursor = proto.writeVarInt(output, cursor, self.max_tokens)
		end

		if self.seed ~= nil then
			output, cursor = proto.writeTag(output, cursor, 105, proto.wireTypes.varint)
			output, cursor = proto.writeVarInt(output, cursor, self.seed)
		end

		if self.context_token ~= nil then
			output, cursor = proto.writeTag(output, cursor, 106, proto.wireTypes.lengthDelimited)
			output, cursor = proto.writeString(output, cursor, self.context_token)
		end

		if self.model ~= "" then
			output, cursor = proto.writeTag(output, cursor, 107, proto.wireTypes.lengthDelimited)
			output, cursor = proto.writeString(output, cursor, self.model)
		end

		local shrunkBuffer = buffer.create(cursor)
		buffer.copy(shrunkBuffer, 0, output, 0, cursor)
		return shrunkBuffer
	end,

	decode = function(input: buffer): GenerateTextRequest
		local self = GenerateTextRequest.new()
		local cursor = 0

		while cursor < buffer.len(input) do
			local field, wireType
			field, wireType, cursor = proto.readTag(input, cursor)

			if wireType == proto.wireTypes.varint then
				if field == 104 then
					local value
					value, cursor = proto.readVarInt(input, cursor)
					self.max_tokens = proto.limitInt32(value)
				elseif field == 105 then
					local value
					value, cursor = proto.readVarInt(input, cursor)
					self.seed = proto.limitInt32(value)
				end
			elseif wireType == proto.wireTypes.lengthDelimited then
				if field == 1 then
					local value
					value, cursor = proto.readBuffer(input, cursor)
					self.path = buffer.tostring(value)
				elseif field == 100 then
					local value
					value, cursor = proto.readBuffer(input, cursor)
					self.user_prompt = buffer.tostring(value)
				elseif field == 101 then
					local value
					value, cursor = proto.readBuffer(input, cursor)
					self.system_prompt = buffer.tostring(value)
				elseif field == 106 then
					local value
					value, cursor = proto.readBuffer(input, cursor)
					self.context_token = buffer.tostring(value)
				elseif field == 107 then
					local value
					value, cursor = proto.readBuffer(input, cursor)
					self.model = buffer.tostring(value)
				end
			elseif wireType == proto.wireTypes.i32 then
				if field == 102 then
					local value
					value, cursor = proto.readFloat(input, cursor)
					self.temperature = value
				elseif field == 103 then
					local value
					value, cursor = proto.readFloat(input, cursor)
					self.top_p = value
				end
			elseif wireType == proto.wireTypes.i64 then
				-- No fields
			else
				error("Unsupported wire type: " .. wireType)
			end
		end

		return self
	end,

	jsonEncode = function(self: GenerateTextRequest): any
		local output: {
			path: string?,
			userPrompt: string?,
			systemPrompt: string?,
			temperature: (number | string)?,
			topP: (number | string)?,
			maxTokens: number?,
			seed: number?,
			contextToken: string?,
			model: string?,
		} =
			{}

		if self.path ~= "" then
			output.path = self.path
		end

		if self.user_prompt ~= "" then
			output.userPrompt = self.user_prompt
		end

		if self.system_prompt ~= "" then
			output.systemPrompt = self.system_prompt
		end

		if self.temperature ~= nil then
			output.temperature = proto.json.serializeNumber(self.temperature)
		end

		if self.top_p ~= nil then
			output.topP = proto.json.serializeNumber(self.top_p)
		end

		if self.max_tokens ~= nil then
			output.maxTokens = self.max_tokens
		end

		if self.seed ~= nil then
			output.seed = self.seed
		end

		if self.context_token ~= nil then
			output.contextToken = self.context_token
		end

		if self.model ~= "" then
			output.model = self.model
		end

		return output
	end,

	jsonDecode = function(input: { [string]: any }): GenerateTextRequest
		local self = GenerateTextRequest.new()

		if input.path ~= nil then
			self.path = input.path
		end

		if input.user_prompt ~= nil then
			self.user_prompt = input.user_prompt
		end

		if input.userPrompt ~= nil then
			self.user_prompt = input.userPrompt
		end

		if input.system_prompt ~= nil then
			self.system_prompt = input.system_prompt
		end

		if input.systemPrompt ~= nil then
			self.system_prompt = input.systemPrompt
		end

		if input.temperature ~= nil then
			self.temperature = proto.json.deserializeNumber(input.temperature)
		end

		if input.top_p ~= nil then
			self.top_p = proto.json.deserializeNumber(input.top_p)
		end

		if input.topP ~= nil then
			self.top_p = proto.json.deserializeNumber(input.topP)
		end

		if input.max_tokens ~= nil then
			self.max_tokens = input.max_tokens
		end

		if input.maxTokens ~= nil then
			self.max_tokens = input.maxTokens
		end

		if input.seed ~= nil then
			self.seed = input.seed
		end

		if input.context_token ~= nil then
			self.context_token = input.context_token
		end

		if input.contextToken ~= nil then
			self.context_token = input.contextToken
		end

		if input.model ~= nil then
			self.model = input.model
		end

		return self
	end,
}

GenerateTextResponse = {
	new = function()
		return {
			generated_text = "",
			context_token = "",
			model = "",
		}
	end,

	encode = function(self: GenerateTextResponse): buffer
		local output = buffer.create(0)
		local cursor = 0

		if self.generated_text ~= "" then
			output, cursor = proto.writeTag(output, cursor, 1, proto.wireTypes.lengthDelimited)
			output, cursor = proto.writeString(output, cursor, self.generated_text)
		end

		if self.context_token ~= "" then
			output, cursor = proto.writeTag(output, cursor, 2, proto.wireTypes.lengthDelimited)
			output, cursor = proto.writeString(output, cursor, self.context_token)
		end

		if self.model ~= "" then
			output, cursor = proto.writeTag(output, cursor, 3, proto.wireTypes.lengthDelimited)
			output, cursor = proto.writeString(output, cursor, self.model)
		end

		local shrunkBuffer = buffer.create(cursor)
		buffer.copy(shrunkBuffer, 0, output, 0, cursor)
		return shrunkBuffer
	end,

	decode = function(input: buffer): GenerateTextResponse
		local self = GenerateTextResponse.new()
		local cursor = 0

		while cursor < buffer.len(input) do
			local field, wireType
			field, wireType, cursor = proto.readTag(input, cursor)

			if wireType == proto.wireTypes.varint then
				-- No fields
			elseif wireType == proto.wireTypes.lengthDelimited then
				if field == 1 then
					local value
					value, cursor = proto.readBuffer(input, cursor)
					self.generated_text = buffer.tostring(value)
				elseif field == 2 then
					local value
					value, cursor = proto.readBuffer(input, cursor)
					self.context_token = buffer.tostring(value)
				elseif field == 3 then
					local value
					value, cursor = proto.readBuffer(input, cursor)
					self.model = buffer.tostring(value)
				end
			elseif wireType == proto.wireTypes.i32 then
				-- No fields
			elseif wireType == proto.wireTypes.i64 then
				-- No fields
			else
				error("Unsupported wire type: " .. wireType)
			end
		end

		return self
	end,

	jsonEncode = function(self: GenerateTextResponse): any
		local output: {
			generatedText: string?,
			contextToken: string?,
			model: string?,
		} = {}

		if self.generated_text ~= "" then
			output.generatedText = self.generated_text
		end

		if self.context_token ~= "" then
			output.contextToken = self.context_token
		end

		if self.model ~= "" then
			output.model = self.model
		end

		return output
	end,

	jsonDecode = function(input: { [string]: any }): GenerateTextResponse
		local self = GenerateTextResponse.new()

		if input.generated_text ~= nil then
			self.generated_text = input.generated_text
		end

		if input.generatedText ~= nil then
			self.generated_text = input.generatedText
		end

		if input.context_token ~= nil then
			self.context_token = input.context_token
		end

		if input.contextToken ~= nil then
			self.context_token = input.contextToken
		end

		if input.model ~= nil then
			self.model = input.model
		end

		return self
	end,
}

return {
	GenerateTextRequest = GenerateTextRequest,
	GenerateTextResponse = GenerateTextResponse,
}
